{"ast":null,"code":"// Country code to flag emoji mapping (fallback)\nexport const countryFlags = {\n  'US': '🇺🇸',\n  'GB': '🇬🇧',\n  'CA': '🇨🇦',\n  'MX': '🇲🇽',\n  'AU': '🇦🇺',\n  'DE': '🇩🇪',\n  'PH': '🇵🇭',\n  'IN': '🇮🇳',\n  'BR': '🇧🇷',\n  'FR': '🇫🇷',\n  'NL': '🇳🇱',\n  'SE': '🇸🇪',\n  'IT': '🇮🇹',\n  'MY': '🇲🇾',\n  'NO': '🇳🇴',\n  'ES': '🇪🇸',\n  'PL': '🇵🇱',\n  'DK': '🇩🇰',\n  'TR': '🇹🇷',\n  'CL': '🇨🇱',\n  'SG': '🇸🇬',\n  'PT': '🇵🇹',\n  'BE': '🇧🇪',\n  'TH': '🇹🇭',\n  'NZ': '🇳🇿',\n  'AR': '🇦🇷',\n  'CH': '🇨🇭',\n  'FI': '🇫🇮',\n  'PE': '🇵🇪',\n  'IE': '🇮🇪',\n  'GR': '🇬🇷',\n  'CO': '🇨🇴',\n  'RO': '🇷🇴',\n  'ZA': '🇿🇦',\n  'AE': '🇦🇪',\n  'CZ': '🇨🇿',\n  'VN': '🇻🇳',\n  'HU': '🇭🇺',\n  'AT': '🇦🇹',\n  'SA': '🇸🇦',\n  'TW': '🇹🇼',\n  'IL': '🇮🇱',\n  'BG': '🇧🇬',\n  'SK': '🇸🇰',\n  'CR': '🇨🇷',\n  'EC': '🇪🇨',\n  'LT': '🇱🇹',\n  'HK': '🇭🇰',\n  'KZ': '🇰🇿',\n  'UA': '🇺🇦',\n  'PK': '🇵🇰',\n  'RU': '🇷🇺',\n  'EG': '🇪🇬',\n  'LV': '🇱🇻',\n  'JP': '🇯🇵',\n  'GT': '🇬🇹',\n  'MA': '🇲🇦',\n  'KR': '🇰🇷',\n  'EE': '🇪🇪',\n  'PA': '🇵🇦',\n  'HN': '🇭🇳',\n  'BO': '🇧🇴',\n  'SV': '🇸🇻',\n  'IS': '🇮🇸',\n  'DO': '🇩🇴',\n  'NI': '🇳🇮',\n  'PY': '🇵🇾',\n  'UY': '🇺🇾',\n  'CY': '🇨🇾',\n  'LU': '🇱🇺',\n  'VE': '🇻🇪',\n  'NG': '🇳🇬',\n  'MT': '🇲🇹',\n  'BY': '🇧🇾',\n  'AD': '🇦🇩'\n};\n\n// Country code to image file mapping\nexport const countryImageFlags = {\n  // Add your custom image mappings here\n  // Format: 'US': 'us.png', 'GB': 'uk.png', etc.\n  // Example mappings (uncomment and add your images):\n  // 'US': 'us.png',\n  // 'GB': 'uk.png',\n  // 'CA': 'ca.png',\n  // 'AU': 'au.png',\n  // 'DE': 'de.png',\n  // 'FR': 'fr.png',\n  // 'IT': 'it.png',\n  // 'ES': 'es.png',\n  // 'JP': 'jp.png',\n  // 'BR': 'br.png',\n};\nexport function getCountryCode(countryName) {\n  console.log(`Getting country code for: \"${countryName}\"`);\n\n  // Handle the actual database values like \"us weekly totals\", \"gb weekly totals\", etc.\n  const countryCodeMap = {\n    // Handle the \"weekly totals\" format from database\n    'us weekly totals': 'US',\n    'gb weekly totals': 'GB',\n    'au weekly totals': 'AU',\n    'ar weekly totals': 'AR',\n    'at weekly totals': 'AT',\n    'ad weekly totals': 'AD',\n    'global weekly totals': 'GLOBAL',\n    // Special case for global\n\n    // Also keep the original mappings for flexibility\n    'United States': 'US',\n    'United States of America': 'US',\n    'USA': 'US',\n    'US': 'US',\n    'United Kingdom': 'GB',\n    'UK': 'GB',\n    'Great Britain': 'GB',\n    'England': 'GB',\n    'Australia': 'AU',\n    'AU': 'AU',\n    'Argentina': 'AR',\n    'AR': 'AR',\n    'Austria': 'AT',\n    'AT': 'AT',\n    'Andorra': 'AD',\n    'AD': 'AD'\n  };\n\n  // Try exact match first\n  let code = countryCodeMap[countryName];\n\n  // If no exact match, try case-insensitive match\n  if (!code) {\n    const lowerCountryName = countryName.toLowerCase();\n    for (const [key, value] of Object.entries(countryCodeMap)) {\n      if (key.toLowerCase() === lowerCountryName) {\n        code = value;\n        break;\n      }\n    }\n  }\n  if (!code) {\n    console.warn(`No flag mapping found for country: \"${countryName}\". No flag will be shown.`);\n    return null;\n  }\n  console.log(`Found country code: ${code} for \"${countryName}\"`);\n  return code;\n}\nexport function getCountryFlag(countryName) {\n  const countryCode = getCountryCode(countryName);\n  return countryFlags[countryCode] || '🌍';\n}\n\n// New function to get country flag image with fallback to emoji\nexport function getCountryFlagImage(countryName) {\n  const countryCode = getCountryCode(countryName);\n\n  // Check if we have a custom image for this country\n  if (countryImageFlags[countryCode]) {\n    return {\n      type: 'image',\n      src: `/images/flags/${countryImageFlags[countryCode]}`,\n      alt: `${countryName} flag`\n    };\n  }\n\n  // Fallback to emoji flag\n  return {\n    type: 'emoji',\n    emoji: countryFlags[countryCode] || '🌍',\n    alt: `${countryName} flag`\n  };\n}\n\n// Helper function to check if an image exists\nexport function checkImageExists(imagePath) {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.onload = () => resolve(true);\n    img.onerror = () => resolve(false);\n    img.src = imagePath;\n  });\n}\nexport function formatNumber(num) {\n  if (num === null || num === undefined) return 'N/A';\n  return new Intl.NumberFormat().format(num);\n}","map":{"version":3,"names":["countryFlags","countryImageFlags","getCountryCode","countryName","console","log","countryCodeMap","code","lowerCountryName","toLowerCase","key","value","Object","entries","warn","getCountryFlag","countryCode","getCountryFlagImage","type","src","alt","emoji","checkImageExists","imagePath","Promise","resolve","img","Image","onload","onerror","formatNumber","num","undefined","Intl","NumberFormat","format"],"sources":["C:/Users/zahid/Downloads/Spot-I-Find/Spot-I-Find/spot-i-find-frontend/src/utils/countryUtils.js"],"sourcesContent":["// Country code to flag emoji mapping (fallback)\r\nexport const countryFlags = {\r\n  'US': '🇺🇸', 'GB': '🇬🇧', 'CA': '🇨🇦', 'MX': '🇲🇽', 'AU': '🇦🇺', 'DE': '🇩🇪', 'PH': '🇵🇭', 'IN': '🇮🇳',\r\n  'BR': '🇧🇷', 'FR': '🇫🇷', 'NL': '🇳🇱', 'SE': '🇸🇪', 'IT': '🇮🇹', 'MY': '🇲🇾', 'NO': '🇳🇴', 'ES': '🇪🇸',\r\n  'PL': '🇵🇱', 'DK': '🇩🇰', 'TR': '🇹🇷', 'CL': '🇨🇱', 'SG': '🇸🇬', 'PT': '🇵🇹', 'BE': '🇧🇪', 'TH': '🇹🇭',\r\n  'NZ': '🇳🇿', 'AR': '🇦🇷', 'CH': '🇨🇭', 'FI': '🇫🇮', 'PE': '🇵🇪', 'IE': '🇮🇪', 'GR': '🇬🇷', 'CO': '🇨🇴',\r\n  'RO': '🇷🇴', 'ZA': '🇿🇦', 'AE': '🇦🇪', 'CZ': '🇨🇿', 'VN': '🇻🇳', 'HU': '🇭🇺', 'AT': '🇦🇹', 'SA': '🇸🇦',\r\n  'TW': '🇹🇼', 'IL': '🇮🇱', 'BG': '🇧🇬', 'SK': '🇸🇰', 'CR': '🇨🇷', 'EC': '🇪🇨', 'LT': '🇱🇹', 'HK': '🇭🇰',\r\n  'KZ': '🇰🇿', 'UA': '🇺🇦', 'PK': '🇵🇰', 'RU': '🇷🇺', 'EG': '🇪🇬', 'LV': '🇱🇻', 'JP': '🇯🇵', 'GT': '🇬🇹',\r\n  'MA': '🇲🇦', 'KR': '🇰🇷', 'EE': '🇪🇪', 'PA': '🇵🇦', 'HN': '🇭🇳', 'BO': '🇧🇴', 'SV': '🇸🇻', 'IS': '🇮🇸',\r\n  'DO': '🇩🇴', 'NI': '🇳🇮', 'PY': '🇵🇾', 'UY': '🇺🇾', 'CY': '🇨🇾', 'LU': '🇱🇺', 'VE': '🇻🇪', 'NG': '🇳🇬',\r\n  'MT': '🇲🇹', 'BY': '🇧🇾', 'AD': '🇦🇩'\r\n};\r\n\r\n// Country code to image file mapping\r\nexport const countryImageFlags = {\r\n  // Add your custom image mappings here\r\n  // Format: 'US': 'us.png', 'GB': 'uk.png', etc.\r\n  // Example mappings (uncomment and add your images):\r\n  // 'US': 'us.png',\r\n  // 'GB': 'uk.png',\r\n  // 'CA': 'ca.png',\r\n  // 'AU': 'au.png',\r\n  // 'DE': 'de.png',\r\n  // 'FR': 'fr.png',\r\n  // 'IT': 'it.png',\r\n  // 'ES': 'es.png',\r\n  // 'JP': 'jp.png',\r\n  // 'BR': 'br.png',\r\n};\r\n\r\nexport function getCountryCode(countryName) {\r\n  console.log(`Getting country code for: \"${countryName}\"`);\r\n  \r\n  // Handle the actual database values like \"us weekly totals\", \"gb weekly totals\", etc.\r\n  const countryCodeMap = {\r\n    // Handle the \"weekly totals\" format from database\r\n    'us weekly totals': 'US',\r\n    'gb weekly totals': 'GB',\r\n    'au weekly totals': 'AU',\r\n    'ar weekly totals': 'AR',\r\n    'at weekly totals': 'AT',\r\n    'ad weekly totals': 'AD',\r\n    'global weekly totals': 'GLOBAL', // Special case for global\r\n    \r\n    // Also keep the original mappings for flexibility\r\n    'United States': 'US',\r\n    'United States of America': 'US',\r\n    'USA': 'US',\r\n    'US': 'US',\r\n    \r\n    'United Kingdom': 'GB',\r\n    'UK': 'GB',\r\n    'Great Britain': 'GB',\r\n    'England': 'GB',\r\n    \r\n    'Australia': 'AU',\r\n    'AU': 'AU',\r\n    \r\n    'Argentina': 'AR',\r\n    'AR': 'AR',\r\n    \r\n    'Austria': 'AT',\r\n    'AT': 'AT',\r\n    \r\n    'Andorra': 'AD',\r\n    'AD': 'AD'\r\n  };\r\n\r\n  // Try exact match first\r\n  let code = countryCodeMap[countryName];\r\n  \r\n  // If no exact match, try case-insensitive match\r\n  if (!code) {\r\n    const lowerCountryName = countryName.toLowerCase();\r\n    for (const [key, value] of Object.entries(countryCodeMap)) {\r\n      if (key.toLowerCase() === lowerCountryName) {\r\n        code = value;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (!code) {\r\n    console.warn(`No flag mapping found for country: \"${countryName}\". No flag will be shown.`);\r\n    return null;\r\n  }\r\n  console.log(`Found country code: ${code} for \"${countryName}\"`);\r\n  return code;\r\n}\r\n\r\nexport function getCountryFlag(countryName) {\r\n  const countryCode = getCountryCode(countryName);\r\n  return countryFlags[countryCode] || '🌍';\r\n}\r\n\r\n// New function to get country flag image with fallback to emoji\r\nexport function getCountryFlagImage(countryName) {\r\n  const countryCode = getCountryCode(countryName);\r\n\r\n  // Check if we have a custom image for this country\r\n  if (countryImageFlags[countryCode]) {\r\n    return {\r\n      type: 'image',\r\n      src: `/images/flags/${countryImageFlags[countryCode]}`,\r\n      alt: `${countryName} flag`\r\n    };\r\n  }\r\n\r\n  // Fallback to emoji flag\r\n  return {\r\n    type: 'emoji',\r\n    emoji: countryFlags[countryCode] || '🌍',\r\n    alt: `${countryName} flag`\r\n  };\r\n}\r\n\r\n// Helper function to check if an image exists\r\nexport function checkImageExists(imagePath) {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.onload = () => resolve(true);\r\n    img.onerror = () => resolve(false);\r\n    img.src = imagePath;\r\n  });\r\n}\r\n\r\nexport function formatNumber(num) {\r\n  if (num === null || num === undefined) return 'N/A';\r\n  return new Intl.NumberFormat().format(num);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}