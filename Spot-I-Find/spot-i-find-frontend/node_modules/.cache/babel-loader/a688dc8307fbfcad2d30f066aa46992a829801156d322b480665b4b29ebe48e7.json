{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./HomePage.css';import{getCountryFlagImage}from'../utils/countryUtils';import{fetchCountries}from'../utils/apiConfig';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const HomePage=_ref=>{let{onCountryClick,loading,setLoading,setError}=_ref;const[countries,setCountries]=useState([]);const[searchTerm,setSearchTerm]=useState('');const[filteredCountries,setFilteredCountries]=useState([]);useEffect(()=>{loadCountries();},[]);useEffect(()=>{if(searchTerm.trim()===''){setFilteredCountries(countries);}else{const filtered=countries.filter(country=>country.name.toLowerCase().includes(searchTerm.toLowerCase()));setFilteredCountries(filtered);}},[searchTerm,countries]);const loadCountries=async()=>{try{setLoading(true);const data=await fetchCountries();// Group countries and count unique artists\nconst countryMap=new Map();data.forEach(country=>{const countryName=country.country;if(!countryMap.has(countryName)){countryMap.set(countryName,new Set());}countryMap.get(countryName).add(country.artist);});const uniqueCountries=Array.from(countryMap.entries()).map(_ref2=>{let[countryName,artists]=_ref2;return{name:countryName,artistCount:artists.size};});setCountries(uniqueCountries);setFilteredCountries(uniqueCountries);}catch(error){console.error('Error loading countries:',error);setError('Failed to load countries. Please try again.');}finally{setLoading(false);}};const handleSearchChange=e=>{setSearchTerm(e.target.value);};const clearSearch=()=>{setSearchTerm('');};const renderFlag=countryName=>{const flagData=getCountryFlagImage(countryName);if(flagData.type==='image'){return/*#__PURE__*/_jsx(\"img\",{src:flagData.src,alt:flagData.alt,className:\"country-flag-image\",onError:e=>{// Fallback to emoji if image fails to load\ne.target.style.display='none';e.target.nextSibling.style.display='block';}});}else{return/*#__PURE__*/_jsx(\"span\",{className:\"country-flag-emoji\",children:flagData.emoji});}};if(loading){return/*#__PURE__*/_jsxs(\"div\",{className:\"loading-spinner\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}),/*#__PURE__*/_jsx(\"p\",{className:\"loading-text\",children:\"Loading countries...\"})]});}return/*#__PURE__*/_jsxs(\"div\",{className:\"home-page\",children:[/*#__PURE__*/_jsxs(\"header\",{className:\"header\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"logo\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-music\"}),/*#__PURE__*/_jsx(\"h1\",{children:\"Spot-I-Find\"})]}),/*#__PURE__*/_jsx(\"p\",{className:\"subtitle\",children:\"Discover Spotify Artists by Country\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"search-section\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"search-container\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-search search-icon\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:searchTerm,onChange:handleSearchChange,placeholder:\"Search for a country...\",className:\"search-input\"}),searchTerm&&/*#__PURE__*/_jsx(\"button\",{onClick:clearSearch,className:\"clear-btn\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-times\"})})]})}),/*#__PURE__*/_jsx(\"div\",{className:\"content\",children:filteredCountries.length===0?/*#__PURE__*/_jsxs(\"div\",{className:\"no-results\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-search\"}),/*#__PURE__*/_jsx(\"h3\",{children:\"No countries found\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Try adjusting your search terms\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"countries-grid\",children:filteredCountries.map((country,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"country-card\",onClick:()=>onCountryClick(country.name),children:[/*#__PURE__*/_jsx(\"div\",{className:\"country-flag\",children:renderFlag(country.name)}),/*#__PURE__*/_jsx(\"div\",{className:\"country-name\",children:country.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"artist-count\",children:[country.artistCount,\" artist\",country.artistCount!==1?'s':'']})]},index))})})]});};export default HomePage;","map":{"version":3,"names":["React","useState","useEffect","getCountryFlagImage","fetchCountries","jsx","_jsx","jsxs","_jsxs","HomePage","_ref","onCountryClick","loading","setLoading","setError","countries","setCountries","searchTerm","setSearchTerm","filteredCountries","setFilteredCountries","loadCountries","trim","filtered","filter","country","name","toLowerCase","includes","data","countryMap","Map","forEach","countryName","has","set","Set","get","add","artist","uniqueCountries","Array","from","entries","map","_ref2","artists","artistCount","size","error","console","handleSearchChange","e","target","value","clearSearch","renderFlag","flagData","type","src","alt","className","onError","style","display","nextSibling","children","emoji","onChange","placeholder","onClick","length","index"],"sources":["C:/Users/zahid/Downloads/Spot-I-Find/Spot-I-Find/spot-i-find-frontend/src/components/HomePage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './HomePage.css';\r\nimport { getCountryFlagImage } from '../utils/countryUtils';\r\nimport { fetchCountries } from '../utils/apiConfig';\r\n\r\nconst HomePage = ({ onCountryClick, loading, setLoading, setError }) => {\r\n  const [countries, setCountries] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filteredCountries, setFilteredCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    loadCountries();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (searchTerm.trim() === '') {\r\n      setFilteredCountries(countries);\r\n    } else {\r\n      const filtered = countries.filter(country =>\r\n        country.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n      setFilteredCountries(filtered);\r\n    }\r\n  }, [searchTerm, countries]);\r\n\r\n  const loadCountries = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await fetchCountries();\r\n      \r\n      // Group countries and count unique artists\r\n      const countryMap = new Map();\r\n      data.forEach(country => {\r\n        const countryName = country.country;\r\n        if (!countryMap.has(countryName)) {\r\n          countryMap.set(countryName, new Set());\r\n        }\r\n        countryMap.get(countryName).add(country.artist);\r\n      });\r\n\r\n      const uniqueCountries = Array.from(countryMap.entries()).map(([countryName, artists]) => ({\r\n        name: countryName,\r\n        artistCount: artists.size\r\n      }));\r\n\r\n      setCountries(uniqueCountries);\r\n      setFilteredCountries(uniqueCountries);\r\n    } catch (error) {\r\n      console.error('Error loading countries:', error);\r\n      setError('Failed to load countries. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSearchChange = (e) => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  const clearSearch = () => {\r\n    setSearchTerm('');\r\n  };\r\n\r\n  const renderFlag = (countryName) => {\r\n    const flagData = getCountryFlagImage(countryName);\r\n    \r\n    if (flagData.type === 'image') {\r\n      return (\r\n        <img \r\n          src={flagData.src} \r\n          alt={flagData.alt}\r\n          className=\"country-flag-image\"\r\n          onError={(e) => {\r\n            // Fallback to emoji if image fails to load\r\n            e.target.style.display = 'none';\r\n            e.target.nextSibling.style.display = 'block';\r\n          }}\r\n        />\r\n      );\r\n    } else {\r\n      return (\r\n        <span className=\"country-flag-emoji\">\r\n          {flagData.emoji}\r\n        </span>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"loading-spinner\">\r\n        <div className=\"spinner\"></div>\r\n        <p className=\"loading-text\">Loading countries...</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"home-page\">\r\n      <header className=\"header\">\r\n        <div className=\"logo\">\r\n          <i className=\"fas fa-music\"></i>\r\n          <h1>Spot-I-Find</h1>\r\n        </div>\r\n        <p className=\"subtitle\">Discover Spotify Artists by Country</p>\r\n      </header>\r\n\r\n      <div className=\"search-section\">\r\n        <div className=\"search-container\">\r\n          <i className=\"fas fa-search search-icon\"></i>\r\n          <input\r\n            type=\"text\"\r\n            value={searchTerm}\r\n            onChange={handleSearchChange}\r\n            placeholder=\"Search for a country...\"\r\n            className=\"search-input\"\r\n          />\r\n          {searchTerm && (\r\n            <button onClick={clearSearch} className=\"clear-btn\">\r\n              <i className=\"fas fa-times\"></i>\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"content\">\r\n        {filteredCountries.length === 0 ? (\r\n          <div className=\"no-results\">\r\n            <i className=\"fas fa-search\"></i>\r\n            <h3>No countries found</h3>\r\n            <p>Try adjusting your search terms</p>\r\n          </div>\r\n        ) : (\r\n          <div className=\"countries-grid\">\r\n            {filteredCountries.map((country, index) => (\r\n              <div\r\n                key={index}\r\n                className=\"country-card\"\r\n                onClick={() => onCountryClick(country.name)}\r\n              >\r\n                <div className=\"country-flag\">\r\n                  {renderFlag(country.name)}\r\n                </div>\r\n                <div className=\"country-name\">{country.name}</div>\r\n                <div className=\"artist-count\">\r\n                  {country.artistCount} artist{country.artistCount !== 1 ? 's' : ''}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}