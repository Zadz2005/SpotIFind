{"ast":null,"code":"// Country code to flag emoji mapping (fallback)\nexport const countryFlags = {\n  'US': '🇺🇸',\n  'GB': '🇬🇧',\n  'AU': '🇦🇺',\n  'AR': '🇦🇷',\n  'AT': '🇦🇹',\n  'AD': '🇦🇩'\n};\n\n// Country code to image file mapping\nexport const countryImageFlags = {\n  // Flag images available in the images/flags folder\n  'US': 'us.png',\n  'GB': 'gb.png',\n  'AU': 'au.png',\n  'AR': 'ar.png',\n  'AT': 'at.png',\n  'AD': 'ad.png'\n};\nexport function getCountryCode(countryName) {\n  console.log(`Getting country code for: \"${countryName}\"`);\n\n  // More flexible mapping with common variations\n  const countryCodeMap = {\n    // United States variations\n    'United States': 'US',\n    'United States of America': 'US',\n    'USA': 'US',\n    'US': 'US',\n    // United Kingdom variations\n    'United Kingdom': 'GB',\n    'UK': 'GB',\n    'Great Britain': 'GB',\n    'England': 'GB',\n    // Australia\n    'Australia': 'AU',\n    'AU': 'AU',\n    // Argentina\n    'Argentina': 'AR',\n    'AR': 'AR',\n    // Austria\n    'Austria': 'AT',\n    'AT': 'AT',\n    // Andorra\n    'Andorra': 'AD',\n    'AD': 'AD'\n  };\n\n  // Try exact match first\n  let code = countryCodeMap[countryName];\n\n  // If no exact match, try case-insensitive match\n  if (!code) {\n    const lowerCountryName = countryName.toLowerCase();\n    for (const [key, value] of Object.entries(countryCodeMap)) {\n      if (key.toLowerCase() === lowerCountryName) {\n        code = value;\n        break;\n      }\n    }\n  }\n  if (!code) {\n    console.warn(`No flag mapping found for country: \"${countryName}\". No flag will be shown.`);\n    return null;\n  }\n  console.log(`Found country code: ${code} for \"${countryName}\"`);\n  return code;\n}\nexport function getCountryFlag(countryName) {\n  const countryCode = getCountryCode(countryName);\n  return countryCode ? countryFlags[countryCode] : '';\n}\n\n// New function to get country flag image with fallback to emoji\nexport function getCountryFlagImage(countryName) {\n  const countryCode = getCountryCode(countryName);\n\n  // If no country code found, return emoji flag as fallback\n  if (!countryCode) {\n    console.log(`No mapping found for \"${countryName}\", using globe emoji`);\n    return {\n      type: 'emoji',\n      emoji: '🌍',\n      alt: `${countryName} flag`\n    };\n  }\n\n  // Check if we have a custom image for this country\n  if (countryImageFlags[countryCode]) {\n    // Use a simpler path - just the filename\n    const imagePath = `/images/flags/${countryImageFlags[countryCode]}`;\n    console.log(`Loading flag image for ${countryName} (${countryCode}): ${imagePath}`);\n\n    // Test if the image exists\n    const img = new Image();\n    img.onload = () => {\n      console.log(`✅ Image loaded successfully: ${imagePath}`);\n    };\n    img.onerror = () => {\n      console.error(`❌ Failed to load image: ${imagePath}`);\n    };\n    img.src = imagePath;\n    return {\n      type: 'image',\n      src: imagePath,\n      alt: `${countryName} flag`\n    };\n  }\n\n  // No image available for this country, use emoji fallback\n  console.log(`No image found for ${countryName} (${countryCode}), using emoji fallback`);\n  return {\n    type: 'emoji',\n    emoji: countryFlags[countryCode] || '🌍',\n    alt: `${countryName} flag`\n  };\n}\n\n// Helper function to check if an image exists\nexport function checkImageExists(imagePath) {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.onload = () => resolve(true);\n    img.onerror = () => resolve(false);\n    img.src = imagePath;\n  });\n}\nexport function formatNumber(num) {\n  if (num === null || num === undefined) return 'N/A';\n  return new Intl.NumberFormat().format(num);\n}","map":{"version":3,"names":["countryFlags","countryImageFlags","getCountryCode","countryName","console","log","countryCodeMap","code","lowerCountryName","toLowerCase","key","value","Object","entries","warn","getCountryFlag","countryCode","getCountryFlagImage","type","emoji","alt","imagePath","img","Image","onload","onerror","error","src","checkImageExists","Promise","resolve","formatNumber","num","undefined","Intl","NumberFormat","format"],"sources":["C:/Users/zahid/Downloads/Spot-I-Find/Spot-I-Find/spot-i-find-frontend/src/utils/countryUtils.js"],"sourcesContent":["// Country code to flag emoji mapping (fallback)\r\nexport const countryFlags = {\r\n  'US': '🇺🇸', 'GB': '🇬🇧', 'AU': '🇦🇺', 'AR': '🇦🇷', 'AT': '🇦🇹', 'AD': '🇦🇩'\r\n};\r\n\r\n// Country code to image file mapping\r\nexport const countryImageFlags = {\r\n  // Flag images available in the images/flags folder\r\n  'US': 'us.png',\r\n  'GB': 'gb.png',\r\n  'AU': 'au.png',\r\n  'AR': 'ar.png',\r\n  'AT': 'at.png',\r\n  'AD': 'ad.png',\r\n};\r\n\r\nexport function getCountryCode(countryName) {\r\n  console.log(`Getting country code for: \"${countryName}\"`);\r\n  \r\n  // More flexible mapping with common variations\r\n  const countryCodeMap = {\r\n    // United States variations\r\n    'United States': 'US',\r\n    'United States of America': 'US',\r\n    'USA': 'US',\r\n    'US': 'US',\r\n    \r\n    // United Kingdom variations\r\n    'United Kingdom': 'GB',\r\n    'UK': 'GB',\r\n    'Great Britain': 'GB',\r\n    'England': 'GB',\r\n    \r\n    // Australia\r\n    'Australia': 'AU',\r\n    'AU': 'AU',\r\n    \r\n    // Argentina\r\n    'Argentina': 'AR',\r\n    'AR': 'AR',\r\n    \r\n    // Austria\r\n    'Austria': 'AT',\r\n    'AT': 'AT',\r\n    \r\n    // Andorra\r\n    'Andorra': 'AD',\r\n    'AD': 'AD'\r\n  };\r\n\r\n  // Try exact match first\r\n  let code = countryCodeMap[countryName];\r\n  \r\n  // If no exact match, try case-insensitive match\r\n  if (!code) {\r\n    const lowerCountryName = countryName.toLowerCase();\r\n    for (const [key, value] of Object.entries(countryCodeMap)) {\r\n      if (key.toLowerCase() === lowerCountryName) {\r\n        code = value;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (!code) {\r\n    console.warn(`No flag mapping found for country: \"${countryName}\". No flag will be shown.`);\r\n    return null;\r\n  }\r\n  console.log(`Found country code: ${code} for \"${countryName}\"`);\r\n  return code;\r\n}\r\n\r\nexport function getCountryFlag(countryName) {\r\n  const countryCode = getCountryCode(countryName);\r\n  return countryCode ? countryFlags[countryCode] : '';\r\n}\r\n\r\n// New function to get country flag image with fallback to emoji\r\nexport function getCountryFlagImage(countryName) {\r\n  const countryCode = getCountryCode(countryName);\r\n\r\n  // If no country code found, return emoji flag as fallback\r\n  if (!countryCode) {\r\n    console.log(`No mapping found for \"${countryName}\", using globe emoji`);\r\n    return {\r\n      type: 'emoji',\r\n      emoji: '🌍',\r\n      alt: `${countryName} flag`\r\n    };\r\n  }\r\n\r\n  // Check if we have a custom image for this country\r\n  if (countryImageFlags[countryCode]) {\r\n    // Use a simpler path - just the filename\r\n    const imagePath = `/images/flags/${countryImageFlags[countryCode]}`;\r\n    console.log(`Loading flag image for ${countryName} (${countryCode}): ${imagePath}`);\r\n    \r\n    // Test if the image exists\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      console.log(`✅ Image loaded successfully: ${imagePath}`);\r\n    };\r\n    img.onerror = () => {\r\n      console.error(`❌ Failed to load image: ${imagePath}`);\r\n    };\r\n    img.src = imagePath;\r\n    \r\n    return {\r\n      type: 'image',\r\n      src: imagePath,\r\n      alt: `${countryName} flag`\r\n    };\r\n  }\r\n\r\n  // No image available for this country, use emoji fallback\r\n  console.log(`No image found for ${countryName} (${countryCode}), using emoji fallback`);\r\n  return {\r\n    type: 'emoji',\r\n    emoji: countryFlags[countryCode] || '🌍',\r\n    alt: `${countryName} flag`\r\n  };\r\n}\r\n\r\n// Helper function to check if an image exists\r\nexport function checkImageExists(imagePath) {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.onload = () => resolve(true);\r\n    img.onerror = () => resolve(false);\r\n    img.src = imagePath;\r\n  });\r\n}\r\n\r\nexport function formatNumber(num) {\r\n  if (num === null || num === undefined) return 'N/A';\r\n  return new Intl.NumberFormat().format(num);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}