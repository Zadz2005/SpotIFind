{"ast":null,"code":"// Country code to flag emoji mapping (fallback)\nexport const countryFlags = {\n  'US': '🇺🇸',\n  'GB': '🇬🇧',\n  'AU': '🇦🇺',\n  'AR': '🇦🇷',\n  'AT': '🇦🇹',\n  'AD': '🇦🇩'\n};\n\n// Country code to image file mapping\nexport const countryImageFlags = {\n  // Flag images available in the images/flags folder\n  'US': 'us.png',\n  'GB': 'gb.png',\n  'AU': 'au.png',\n  'AR': 'ar.png',\n  'AT': 'at.png',\n  'AD': 'ad.png'\n};\nexport function getCountryCode(countryName) {\n  console.log(`Getting country code for: \"${countryName}\"`);\n\n  // Simplified mapping - only countries with flag images\n  const countryCodeMap = {\n    'United States': 'US',\n    'United Kingdom': 'GB',\n    'Australia': 'AU',\n    'Argentina': 'AR',\n    'Austria': 'AT',\n    'Andorra': 'AD'\n  };\n  const code = countryCodeMap[countryName];\n  if (!code) {\n    console.warn(`No flag mapping found for country: \"${countryName}\". Using 🌍 as default.`);\n    return 'UN';\n  }\n  console.log(`Found country code: ${code} for \"${countryName}\"`);\n  return code;\n}\nexport function getCountryFlag(countryName) {\n  const countryCode = getCountryCode(countryName);\n  return countryFlags[countryCode] || '🌍';\n}\n\n// New function to get country flag image with fallback to emoji\nexport function getCountryFlagImage(countryName) {\n  const countryCode = getCountryCode(countryName);\n\n  // Check if we have a custom image for this country\n  if (countryImageFlags[countryCode]) {\n    // Use a simpler path - just the filename\n    const imagePath = `/images/flags/${countryImageFlags[countryCode]}`;\n    console.log(`Loading flag image for ${countryName} (${countryCode}): ${imagePath}`);\n\n    // Test if the image exists\n    const img = new Image();\n    img.onload = () => {\n      console.log(`✅ Image loaded successfully: ${imagePath}`);\n    };\n    img.onerror = () => {\n      console.error(`❌ Failed to load image: ${imagePath}`);\n    };\n    img.src = imagePath;\n    return {\n      type: 'image',\n      src: imagePath,\n      alt: `${countryName} flag`\n    };\n  }\n\n  // Fallback to emoji flag\n  console.log(`No image found for ${countryName} (${countryCode}), using emoji: ${countryFlags[countryCode] || '🌍'}`);\n  return {\n    type: 'emoji',\n    emoji: countryFlags[countryCode] || '🌍',\n    alt: `${countryName} flag`\n  };\n}\n\n// Helper function to check if an image exists\nexport function checkImageExists(imagePath) {\n  return new Promise(resolve => {\n    const img = new Image();\n    img.onload = () => resolve(true);\n    img.onerror = () => resolve(false);\n    img.src = imagePath;\n  });\n}\nexport function formatNumber(num) {\n  if (num === null || num === undefined) return 'N/A';\n  return new Intl.NumberFormat().format(num);\n}","map":{"version":3,"names":["countryFlags","countryImageFlags","getCountryCode","countryName","console","log","countryCodeMap","code","warn","getCountryFlag","countryCode","getCountryFlagImage","imagePath","img","Image","onload","onerror","error","src","type","alt","emoji","checkImageExists","Promise","resolve","formatNumber","num","undefined","Intl","NumberFormat","format"],"sources":["C:/Users/zahid/Downloads/Spot-I-Find/Spot-I-Find/spot-i-find-frontend/src/utils/countryUtils.js"],"sourcesContent":["// Country code to flag emoji mapping (fallback)\r\nexport const countryFlags = {\r\n  'US': '🇺🇸', 'GB': '🇬🇧', 'AU': '🇦🇺', 'AR': '🇦🇷', 'AT': '🇦🇹', 'AD': '🇦🇩'\r\n};\r\n\r\n// Country code to image file mapping\r\nexport const countryImageFlags = {\r\n  // Flag images available in the images/flags folder\r\n  'US': 'us.png',\r\n  'GB': 'gb.png',\r\n  'AU': 'au.png',\r\n  'AR': 'ar.png',\r\n  'AT': 'at.png',\r\n  'AD': 'ad.png',\r\n};\r\n\r\nexport function getCountryCode(countryName) {\r\n  console.log(`Getting country code for: \"${countryName}\"`);\r\n  \r\n  // Simplified mapping - only countries with flag images\r\n  const countryCodeMap = {\r\n    'United States': 'US',\r\n    'United Kingdom': 'GB', \r\n    'Australia': 'AU',\r\n    'Argentina': 'AR',\r\n    'Austria': 'AT',\r\n    'Andorra': 'AD'\r\n  };\r\n\r\n  const code = countryCodeMap[countryName];\r\n  if (!code) {\r\n    console.warn(`No flag mapping found for country: \"${countryName}\". Using 🌍 as default.`);\r\n    return 'UN';\r\n  }\r\n  console.log(`Found country code: ${code} for \"${countryName}\"`);\r\n  return code;\r\n}\r\n\r\nexport function getCountryFlag(countryName) {\r\n  const countryCode = getCountryCode(countryName);\r\n  return countryFlags[countryCode] || '🌍';\r\n}\r\n\r\n// New function to get country flag image with fallback to emoji\r\nexport function getCountryFlagImage(countryName) {\r\n  const countryCode = getCountryCode(countryName);\r\n\r\n  // Check if we have a custom image for this country\r\n  if (countryImageFlags[countryCode]) {\r\n    // Use a simpler path - just the filename\r\n    const imagePath = `/images/flags/${countryImageFlags[countryCode]}`;\r\n    console.log(`Loading flag image for ${countryName} (${countryCode}): ${imagePath}`);\r\n    \r\n    // Test if the image exists\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      console.log(`✅ Image loaded successfully: ${imagePath}`);\r\n    };\r\n    img.onerror = () => {\r\n      console.error(`❌ Failed to load image: ${imagePath}`);\r\n    };\r\n    img.src = imagePath;\r\n    \r\n    return {\r\n      type: 'image',\r\n      src: imagePath,\r\n      alt: `${countryName} flag`\r\n    };\r\n  }\r\n\r\n  // Fallback to emoji flag\r\n  console.log(`No image found for ${countryName} (${countryCode}), using emoji: ${countryFlags[countryCode] || '🌍'}`);\r\n  return {\r\n    type: 'emoji',\r\n    emoji: countryFlags[countryCode] || '🌍',\r\n    alt: `${countryName} flag`\r\n  };\r\n}\r\n\r\n// Helper function to check if an image exists\r\nexport function checkImageExists(imagePath) {\r\n  return new Promise((resolve) => {\r\n    const img = new Image();\r\n    img.onload = () => resolve(true);\r\n    img.onerror = () => resolve(false);\r\n    img.src = imagePath;\r\n  });\r\n}\r\n\r\nexport function formatNumber(num) {\r\n  if (num === null || num === undefined) return 'N/A';\r\n  return new Intl.NumberFormat().format(num);\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}